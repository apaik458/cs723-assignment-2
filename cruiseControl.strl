module cruiseControl:

% Cruise Control Implementation

%declarations of data-handling functions in C
function regulateThrottle(integer, float, float): float;

% Global Constants
constant SpeedMin = 30.0f : float;
constant SpeedMax = 150.0f : float;
constant SpeedInc = 2.5f : float;
constant Kp = 8.113f : float;
constant Ki = 0.5f : float;
constant ThrottleSatMax = 45.0f : float;
constant PedalsMin = 3.0f : float;

% Interface declarations
input On, Off, Resume, Set, QuickDecel, QuickAccel;
input Accel: float;
input Brake: float;
input Speed: float;
output CarSpeedControlMessage: string;
output StateChangeMessage : string;
output CruiseState : integer;
output CruiseSpeed : float;
output ThrottleCmd : float;

% Define initial variables
var state := 0 : integer in % OFF, ON, STDBY, DISABLE
var cruiseSpeed := 0.0f : float in
var throttleCmd := 0.0f : float in
var currentSpeed := 0.0f : float in
var accelValue := 0.0f : float in
var brakeValue := 0.0f : float in
var error := 0.0f : float in
var integral := 0.0f : float in

% Define signals for mutual exclusion
signal QuickDecelActive in
signal QuickAccelActive in

% Initialize
emit CruiseState(state);

% Main thread
loop
	emit StateChangeMessage("DID NOT CHANGE");
	abort
	await On;
	state := 1;
	emit CruiseState(state);
		loop
			await Speed;
			if ?Brake > PedalsMin then
				state := 2;
				emit StateChangeMessage("Changed to STDBY");
			elsif ?Speed <= SpeedMax and ?Speed >= SpeedMin and ?Accel < PedalsMin then
				state := 1;
				emit StateChangeMessage("Changed to ON");
			else
				state := 3;  % Transition to DISABLE if conditions are not met
				emit StateChangeMessage("Changed to DISABLE");
			end if;
			emit CruiseState(state);
		end loop
	when Off do
		state := 0;  % Transition to OFF
		emit CruiseState(state);
		emit StateChangeMessage("Changed to OFF");
	end abort;
end loop
|| 
loop
	await CruiseState;
	await CruiseSpeed;
	% Cruise Control will be automatically regulated
	% Using C for throttle regulation
	if ?CruiseState = 1 or ?CruiseState = 2 or ?CruiseState = 3 then
		% Has just gone into ON state
		if not (pre(?CruiseState) = 1) then
			emit CarSpeedControlMessage("Car Speed Regulating");
			emit ThrottleCmd(regulateThrottle(1, ?CruiseSpeed, ?Speed));
		else
			emit ThrottleCmd(regulateThrottle(0, ?CruiseSpeed, ?Speed));
		end if;	
	else
		emit CarSpeedControlMessage("Car Speed Accelerator");
		emit ThrottleCmd(?Accel);
	end if;
end loop
||
loop
	await On;
	emit CruiseSpeed(?Speed);
	if ?CruiseState = 1 or ?CruiseState = 2 or ?CruiseState = 3 then
	% Manage speed only when in ON, STDBY, DISABLE states
		loop
			await Set;
			emit CruiseSpeed(?Speed);
		end loop
		||
		loop
			await QuickAccel;
			present(QuickDecelActive) else
                emit QuickAccelActive;
				if ?CruiseSpeed + SpeedInc > SpeedMax then
					emit CruiseSpeed(SpeedMax);
				else
					emit CruiseSpeed(?CruiseSpeed + SpeedInc)
				end if;
			end present;
		end loop
		||
		loop
			await QuickDecel;
			present(QuickAccelActive) else
				emit QuickDecelActive;
				if ?CruiseSpeed - SpeedInc < SpeedMax then
					emit CruiseSpeed(SpeedMin);
				else
					emit CruiseSpeed(?CruiseSpeed - SpeedInc)
				end if;
			end present;
		end loop
	end if;
end loop
end signal
end signal
end var	
end var
end var
end var
end var
end var
end var
end var
end module
