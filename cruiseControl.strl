module cruiseControl:

% Cruise Control Implementation

%declarations of data-handling functions in C
function regulateThrottle(integer, float, float): float;

% Global Constants
constant SpeedMin = 30.0f : float;
constant SpeedMax = 150.0f : float;
constant Kp = 8.113f : float;
constant Ki = 0.5f : float;
constant ThrottleSatMax = 45.0f : float;
constant PedalsMin = 3.0f : float;

% Interface declarations
input On, Off, Resume, Set, QuickDecel, QuickAccel;
input Accel: float;
input Brake: float;
input Speed: float;
output message: string;
output CruiseState : integer;
output CruiseSpeed : float;
output ThrottleCmd : float;

% Define initial variables
var state := 0 : integer in % OFF, ON, STDBY, DISABLE
var cruiseSpeed := 0.0f : float in
var throttleCmd := 0.0f : float in
var currentSpeed := 0.0f : float in
var accelValue := 0.0f : float in
var brakeValue := 0.0f : float in
var error := 0.0f : float in
var integral := 0.0f : float in

% Initialize
emit CruiseState(state);

% Main thread
loop
	abort
	await On;
	state := 1;
	emit CruiseState(state);
		loop
			await Speed;
			currentSpeed := ?Speed;
			accelValue := ?Accel;
			brakeValue := ?Brake;
			if brakeValue > PedalsMin then
				state := 2;
			elsif currentSpeed <= SpeedMax and currentSpeed >= SpeedMin and accelValue < PedalsMin then
				state := 1;
			else
				state := 3;  % Transition to DISABLE if conditions are not met
			end if;
			emit CruiseSpeed(currentSpeed);
			emit CruiseState(state);
		end loop
	when Off do
		state := 0;  % Transition to OFF
		emit CruiseState(state);
	end abort;
end loop
|| 
loop
	await On;
	emit CruiseSpeed(currentSpeed);

	loop
    	await Set;
    	emit CruiseSpeed(currentSpeed);
	end loop
	||
	loop
		await QuickAccel;
		if CruiseSpeed + SpeedInc > SpeedMax then
			emit CruiseSpeed(SpeedMax);
		else
			emit CruiseSpeed(CruiseSpeed + SpeedInc);
		end if
	end loop
	||
	loop
		await QuickDecel;
		if CruiseSpeed - SpeedInc < SpeedMin then
			emit CruiseSpeed(SpeedMin);
		else
			emit CruiseSpeed(CruiseSpeed - SpeedInc);
		end if
	end loop
end loop
end var	
end var
end var
end var
end var
end var
end var
end var
end module

