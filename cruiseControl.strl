module cruiseControl:

% Cruise Control Implementation
% emit message ("in on state now");

% Global Constants
constant SpeedMin = 30.0f : float;
constant SpeedMax = 150.0f : float;
constant Kp = 8.113f : float;
constant Ki = 0.5f : float;
constant ThrottleSatMax = 45.0f : float;
constant PedalsMin = 3.0f : float;

procedure send()(integer);
function outCount(): integer;

% Interface declarations
input On, Off, Resume, Set, QuickDecel, QuickAccel;
input Accel: float;
input Brake: float;
input Speed: float;
output message: string;
output CruiseState : string;
output CruiseSpeed : float;
output ThrottleCmd : float;

% Define initial variables
var state := "OFF" : string in  % OFF, ON, STDBY, DISABLE
var cruiseSpeed := 0.0f : float in
var throttleCmd := 0.0f : float in
var currentSpeed := 0.0f : float in
var accelValue := 0.0f : float in
var brakeValue := 0.0f : float in

% Initialize
emit CruiseState(state);

% Main thread
loop
	abort
	await On;
	state := "ON";
	emit CruiseState(state);
		loop
			await Speed;
			currentSpeed := ?Speed;
			accelValue := ?Accel;
			brakeValue := ?Brake;
			
			if brakeValue > PedalsMin then
				state := "STDBY";
			elsif currentSpeed <= SpeedMax and currentSpeed >= SpeedMin and accelValue < PedalsMin then
				state := "ON";
				emit CruiseSpeed(currentSpeed);
			else
				state := "DISABLE";  % Transition to DISABLE if conditions are not met
				emit CruiseSpeed(currentSpeed);
			end if;
				
		emit CruiseState(state);
		end loop
	when Off do
		state := "OFF";  % Transition to OFF
		emit CruiseState(state);
	end abort;
end loop

end var
end var
end var
end var
end var
end var

end module

